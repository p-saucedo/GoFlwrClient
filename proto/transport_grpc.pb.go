// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: transport.proto

package __goflwr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlowerServiceClient is the client API for FlowerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlowerServiceClient interface {
	Join(ctx context.Context, opts ...grpc.CallOption) (FlowerService_JoinClient, error)
}

type flowerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFlowerServiceClient(cc grpc.ClientConnInterface) FlowerServiceClient {
	return &flowerServiceClient{cc}
}

func (c *flowerServiceClient) Join(ctx context.Context, opts ...grpc.CallOption) (FlowerService_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlowerService_ServiceDesc.Streams[0], "/flwr.proto.FlowerService/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &flowerServiceJoinClient{stream}
	return x, nil
}

type FlowerService_JoinClient interface {
	Send(*ClientMessage) error
	Recv() (*ServerMessage, error)
	grpc.ClientStream
}

type flowerServiceJoinClient struct {
	grpc.ClientStream
}

func (x *flowerServiceJoinClient) Send(m *ClientMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *flowerServiceJoinClient) Recv() (*ServerMessage, error) {
	m := new(ServerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlowerServiceServer is the server API for FlowerService service.
// All implementations must embed UnimplementedFlowerServiceServer
// for forward compatibility
type FlowerServiceServer interface {
	Join(FlowerService_JoinServer) error
	mustEmbedUnimplementedFlowerServiceServer()
}

// UnimplementedFlowerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFlowerServiceServer struct {
}

func (UnimplementedFlowerServiceServer) Join(FlowerService_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedFlowerServiceServer) mustEmbedUnimplementedFlowerServiceServer() {}

// UnsafeFlowerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlowerServiceServer will
// result in compilation errors.
type UnsafeFlowerServiceServer interface {
	mustEmbedUnimplementedFlowerServiceServer()
}

func RegisterFlowerServiceServer(s grpc.ServiceRegistrar, srv FlowerServiceServer) {
	s.RegisterService(&FlowerService_ServiceDesc, srv)
}

func _FlowerService_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FlowerServiceServer).Join(&flowerServiceJoinServer{stream})
}

type FlowerService_JoinServer interface {
	Send(*ServerMessage) error
	Recv() (*ClientMessage, error)
	grpc.ServerStream
}

type flowerServiceJoinServer struct {
	grpc.ServerStream
}

func (x *flowerServiceJoinServer) Send(m *ServerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *flowerServiceJoinServer) Recv() (*ClientMessage, error) {
	m := new(ClientMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FlowerService_ServiceDesc is the grpc.ServiceDesc for FlowerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlowerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flwr.proto.FlowerService",
	HandlerType: (*FlowerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _FlowerService_Join_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "transport.proto",
}
